#!/usr/bin/env ruby
#==============================================================================
# Copyright (C) 2019-present Alces Flight Ltd.
#
# This file is part of Flight Diagnostics.
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which is available at
# <https://www.eclipse.org/legal/epl-2.0>, or alternative license
# terms made available by Alces Flight Ltd - please direct inquiries
# about licensing to licensing@alces-flight.com.
#
# Flight Diagnostics is distributed in the hope that it will be useful, but
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR
# IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS
# OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. See the Eclipse Public License 2.0 for more
# details.
#
# You should have received a copy of the Eclipse Public License 2.0
# along with Flight Diagnostics. If not, see:
#
#  https://opensource.org/licenses/EPL-2.0
#
# For more information on <project>, please visit:
# https://github.com/alces-flight/flight-diag
#==============================================================================
require 'readline'
require 'pathname'
require 'abbrev'
require 'shellwords'
require 'etc'
require 'yaml'
require 'ostruct'
require 'logger'
require 'fileutils'
require 'socket'

begin
  require 'openflight/banner'
rescue LoadError
  nil
end

VERSION = '2019.1'
PROGRAM_NAME = ENV.fetch('FLIGHT_PROGRAM_NAME','diag')

PrivilegeError = Class.new(RuntimeError)
ConfigError = Class.new(RuntimeError)

def logger
  @logger ||=
    begin
      file = File.open(log_file, 'a')
      file.sync = true
      Logger.new(file, level: Logger::INFO, progname: 'diag')
    end
end

def uid_for(uname)
  Etc.getpwnam(uname).uid
end

def gid_for(gname)
  Etc.getgrnam(gname).gid
end

def home_directory_for(uname)
  Etc.getpwnam(uname).dir
end

def load_history(filepath)
  filepath.readlines.each { |line| Readline::HISTORY << line.chomp  } if filepath.file?
end

def save_history(filepath)
  filepath.parent.mkpath unless filepath.parent.directory?
  filepath.open('w') do |f|
    Readline::HISTORY.each {|l| f.puts l unless l.empty? }
  end
end

def commands
  @commands ||= []
end

def user_commands
  commands.reject do |c|
    cmd = command(c)
    cmd.user || cmd.group
  end.sort
end

def superuser_commands
  commands.select do |c|
    cmd = command(c)
    cmd.user || cmd.group
  end.sort
end

def load_commands
  Dir.glob(
    File.join(
      command_filepath,
      '*'
    )
  ).each do |cmd|
    name = File.basename(cmd)
    begin
      command_metadata[name] = OpenStruct.new(
        YAML.load(
          ''.tap do |md|
            File.readlines(cmd).each do |s|
              md << s[3..-1] if s =~ /^#: /
            end
          end
        ).merge!(name: name)
      )
      commands << name
    rescue
      $stderr.puts "flight diag: '#{name}': unable to parse: #{$!.message}"
    end
  end
end

def command_metadata
  @command_metadata ||= {}
end

def command(c)
  command_metadata[c]
end

def log_file
  if Process.euid == 0
    FileUtils.mkdir_p(log_filepath)
    File.join(
      log_filepath,
      "flight-diag.#{hostname}.log",
    )
  else
    File.join(ENV['HOME'], '.flight-diag.log')
  end
end

def config
  @config ||= begin
                config_data = YAML.load_file(config_file) rescue {}
                OpenStruct.new(config_data)
              end
end

def config_file
  File.join(
    __dir__,
    '..',
    'etc',
    'config.yml'
  )
end

def log_filepath
  config.log_filepath ||
    File.join(
      __dir__,
      '..',
      'var',
      'log',
    )
end

def command_filepath
  File.join(
    __dir__,
    '..',
    'libexec',
  )
end

def assert_exists(user, group)
  if user
    begin
      uid_for(user)
    rescue
      raise PrivilegeError, "unable to find user: #{user}"
    end
  end
  if group
    begin
      gid_for(group)
    rescue
      raise PrivilegeError, "unable to find group: #{group}"
    end
  end
end

def assert_non_system(user, group)
  if user && user != 'nobody' && uid_for(user) < 1000
    raise PrivilegeError, "unable to impersonate system user: #{user}"
  end
  if group && group != 'nobody' && gid_for(group) < 1000
    raise PrivilegeError, "unable to impersonate system group: #{group}"
  end
end

def assert_dropped_privs
  begin
    Process::Sys.setuid(0)
  rescue Errno::EPERM
    nil
  else
    raise PrivilegeError, "unable to drop privileges"
  end
end

def setup_bash_funcs(h, fileno)
  h['BASH_FUNC_flight_diag_comms()'] = <<EOF
() { local msg=$1
 shift
 if [ "$1" ]; then
 echo "${msg}:$*" 1>&#{fileno};
 else
 cat | sed "s/^/${msg}:/g" 1>&#{fileno};
 fi
}
EOF
  h['BASH_FUNC_diag_err()'] = "() { flight_diag_comms ERR \"$@\"\n}"
  h['BASH_FUNC_diag_log()'] = "() { flight_diag_comms LOG \"$@\"\n}"
  h['BASH_FUNC_diag_echo()'] = "() { flight_diag_comms LOG \"$@\"\necho \"$@\"\n}"
end

def set_privs(cmd_name, user, wr)
  cmd = command(cmd_name)
  if Process.euid == 0 && cmd.user != 'root'
    if command_requires_user?(cmd)
      group = user
    else
      user = cmd.user
      group = cmd.group
    end
    assert_exists(user, group)
    assert_non_system(user, group) if command_requires_user?(cmd)
    user ||= 'nobody'
    group ||= 'nobody'
    wr.write("LOG:assuming user: #{user} group: #{group}\n")
    Process.initgroups(user, gid_for('nobody'))
    Process::Sys.setgid(gid_for(group))
    Process::Sys.setuid(uid_for(user))
    assert_dropped_privs
  elsif group && !Process.groups.include?(gid_for(group))
    raise PrivilegeError, "unable to setgid to #{group}"
  elsif user && Process.euid != uid_for(user)
    raise PrivilegeError, "unable to setuid to #{user}"
  else
    wr.write("LOG:retaining user privileges for: #{user}\n")
  end
end

def hostname
  @hostname ||= Socket.gethostname.split('.').first
end

def domainname
  @domainname ||= (
    config.domain_name ||
    Socket.gethostname.split('.')[1..-1].tap do |a|
      if a.nil?
        raise ConfigError, "could not determine domain name (try setting 'domain_name' in configuration)"
      end
    end.join('.')
  )
end

def log_operator
  if ENV['SUDO_USER']
    logger.info("Operator (via sudo): #{ENV['SUDO_USER']}@#{hostname}")
  else
    logger.info("Operator: #{ENV['USER']}@#{hostname}")
  end
end

def remote(params)
  run_fork(params) do |wr|
    host = [params[1], domainname].join('.')
    args = [
      '/usr/bin/ssh',
      '-t'
    ].tap do |a|
      if Process.euid == 0
        a << '-l'
        a << (config.remote_diag_user || ENV['SUDO_USER'] || 'siteadmin')
      end
      a << host
      a << '/usr/bin/sudo' if Process.euid == 0
      a << config.remote_ruby_path if config.remote_ruby_path
      a << (config.remote_diag_path || File.join(__dir__, 'diag'))
      a << '--remote'
      a.concat(params[2..-1])
    end
    wr.write("LOG:exec: #{args.inspect}\n")
    if Process.euid == 0
      if !config.remote_from_root
        user = ENV['SUDO_USER'] || config.remote_diag_user
        if user.nil?
          raise PrivilegeError, 'remote access from root disabled but user could not be determined'
        end
        wr.write("LOG:assuming user for remote access: #{user}\n")
        Process.initgroups(user, gid_for('nobody'))
        Process::Sys.setgid(gid_for('nobody'))
        Process::Sys.setuid(uid_for(user))
        assert_dropped_privs
        ENV['HOME'] = home_directory_for(user)
        wr.write("LOG:set HOME environment variable to: #{ENV['HOME']}\n")
      else
        wr.write("LOG:remaining as root for remote access\n")
      end
    end
    $stderr.puts "[Opening remote connection to #{host}]"
    system(*args).tap do
      $stderr.puts "[Closed remote connection to #{host}]"
    end
  end
end

def run_fork(params, &block)
  log_operator
  Signal.trap('INT','IGNORE')
  logger.info("Running: #{params.inspect}")
  rd, wr = IO.pipe
  pid = fork {
    rd.close
    Signal.trap('INT','DEFAULT')
    begin
      if block.call(wr)
        exit(0)
      else
        exit(1)
      end
    rescue PrivilegeError, ConfigError
      wr.write("ERR:#{params.first}: #{$!.message}\n")
      exit(1)
    rescue Interrupt
      nil
    ensure
      logger.close
    end
  }
  wr.close
  while !rd.eof?
    line = rd.readline
    if line =~ /^LOG:/
      logger.info("<#{pid}> #{line[4..-2]}")
    elsif line =~ /^ERR:/
      logger.error("<#{pid}> #{line[4..-2]}")
      $stderr.puts "flight diag: #{line[4..-2]}"
    end
  end
  pid, status = Process.wait2(pid)
  logger.info(status)
  Signal.trap('INT','DEFAULT')
  status.success?
end

def run(params)
  run_fork(params) do |wr|
    c = params.first
    cmd_name, user = c.split(':')
    set_privs(cmd_name, user, wr)
    exe = File.join(command_filepath, cmd_name)
    args = [exe, *(params[1..-1])]
    wr.close_on_exec = false
    setup_bash_funcs(ENV, wr.fileno)
    args.unshift('/bin/bash') if !File.stat(exe).executable?
    wr.write("LOG:exec: #{args.inspect}\n")
    exec(*args, close_others: false)
  end
end

def help_remote(repl_context = false)
  puts <<EOF
  NAME:

    remote - Run diagnostics on a remote host

  SYNOPSIS:

    #{repl_context ? '' : "#{PROGRAM_NAME} "}remote HOST [COMMAND [OPTION...] [ARG...]]

  DESCRIPTION:

    Execute a diag COMMAND on the specified remote HOST. If no COMMAND
    is specified, diag will start in interactive mode.

EOF
end

def help(repl_context = false, c = nil)
  if config.enable_remote && c == 'remote'
    help_remote(repl_context)
    return
  end
  cmd_name, user = (c || '').split(':')
  if commands.include?(cmd_name)
    cmd = command(cmd_name)
    puts <<EOF
  NAME:

    #{cmd_name}#{cmd.synopsis ? ' - ' + cmd.synopsis + '.' : ''}

  SYNOPSIS

    #{repl_context ? '' : "#{PROGRAM_NAME} "}#{cmd_name}#{command_requires_user?(cmd) ? ':USER' : ''} [OPTION...] [ARG...]

  DESCRIPTION:

    #{(cmd.help || "No description provided. Try '#{repl_context ? '' : "#{PROGRAM_NAME} "}#{cmd_name}#{command_requires_user?(cmd) ? ':USER' : ''} --help'.").split("\n").join("\n    ")}
#{cmd.examples ? "\n  EXAMPLES:\n\n    " + cmd.examples.split("\n").join("\n    ") + "\n" : ''}
EOF
  else
    if !repl_context
      begin
        puts OpenFlight::Banner.render(title: 'Flight Diagnostics', version: VERSION)
      rescue
        nil
      end
    end
    puts <<EOF
Usage: #{repl_context ? '' : "#{PROGRAM_NAME} "}COMMAND [OPTION...] [ARG...]
Perform diagnostic activities.

User commands:
EOF
    user_commands.each do |c|
      printf("  %-20s %s\n", c, command(c).synopsis || '(no synopsis)')
    end
    puts <<EOF

Privileged commands:
EOF
    superuser_commands.each do |c|
      cmd = command(c)
      c += ':USER' if command_requires_user?(cmd)
      privilege = '('.tap do |s|
        s << [].tap do |a|
          if cmd.user
            a << (command_requires_user?(cmd) ? 'supplied user' : cmd.user)
          end
          a << "group:#{cmd.group}" if cmd.group
        end.join('/')
      end << ')'
      printf("  %-20s %s %s\n", c, privilege, cmd.synopsis || '(no synopsis)')
    end
    if repl_context
      puts <<EOF

Interactive commands:
  exit                 Exit the shell
  history              Show command history
EOF
    end
    if config.enable_remote == true
      puts <<EOF

To execute diagnostics on a remote host run:
  #{repl_context ? '' : "#{PROGRAM_NAME} "}remote HOST [COMMAND]
EOF
    end
    puts <<EOF

For more help on a particular command run:
  #{repl_context ? '' : "#{PROGRAM_NAME} "}help COMMAND

Please report bugs to <flight@alces-flight.com>
Alces Flight home page: <https://alces-flight.com/>
EOF
  end
end

def valid_command?(cmd)
  commands.include?(cmd)
end

def unavailable_command?(cmd)
  Process.euid != 0 &&
    ( command_requires_user?(cmd) ||
      superuser_commands.include?(cmd.name) )
end

def command_requires_user?(cmd)
  cmd.user == :supply
end

def process(params, repl_context = false, remote_context = false)
  c = params.first
  if c == 'history' && repl_context
    puts Readline::HISTORY.to_a
  elsif c == 'help'
    help(repl_context, params[1])
  elsif config.enable_remote && c == 'remote'
    if remote_context
      $stderr.puts "flight diag: 'remote' cannot be used on a remote connection!"
    elsif params[1].nil?
      help_remote(repl_context)
    else
      remote(params)
    end
  else
    cmd_name, user = c.split(':')
    if valid_command?(cmd_name)
      cmd = command(cmd_name)
      if unavailable_command?(cmd)
        msg = "flight diag: privileged command '#{c}' is unavailable.".tap do |s|
          s << " Try 'sudo #{PROGRAM_NAME} #{c}'." unless repl_context
        end
        $stderr.puts msg
      elsif command_requires_user?(cmd) && user.nil?
        $stderr.puts "flight diag: '#{cmd_name}' requires specification of a user, e.g. '#{cmd_name}:fred'. See 'help'."
      else
        run(params)
      end
    else
      $stderr.puts "flight diag: '#{c}' is not a known command. See 'help'."
    end
  end
end

def repl(remote_context = false)
  history_filepath = Pathname.new(File.join(ENV['HOME'], '.flight_diag_history'))
  load_history history_filepath
  Readline.completion_proc = lambda do |val|
    if Readline.line_buffer.include?(' ')
      nil
    else
      commands.grep( /^#{Regexp.escape(val)}/ )
    end
  end

  su = (Process.euid == 0 ? ' #' : ' $')
  prompt = if remote_context
             "(#{hostname}) flight diag#{su}> "
           else
             "flight diag#{su}> "
           end
  begin
    puts OpenFlight::Banner.render(title: 'Flight Diagnostics', version: VERSION)
  rescue
    nil
  end
  begin
    while line = Readline.readline(prompt, true)
      line.strip!
      if line == 'exit' || line == 'quit'
        break
      elsif line =~ /^\s*$/
        # Remove blank lines from history
        Readline::HISTORY.pop
      else
        # prevent duplicates
        if Readline::HISTORY.length > 1 && Readline::HISTORY[-2] == line
          Readline::HISTORY.pop
        end
        begin
          process(Shellwords.split(line), true, remote_context)
        rescue ArgumentError
          $stderr.puts "flight diag: #{$!.message}"
        end
      end
    end
  rescue Interrupt
    system("stty echo")
    $stderr.puts ""
    retry
  end
ensure
  logger.close
  save_history history_filepath
  $stderr.puts ""
end

ENV['LESSSECURE'] = '1'
load_commands
args = ARGV.dup
remote = false
if args.first == '--remote'
  args.shift
  remote = true
end
if args.empty?
  repl(remote)
else
  begin
    if !process(args, false, remote)
      exit(1)
    end
  ensure
    logger.close
    system("stty echo 2>/dev/null")
  end
end
